mean((by_sub$`Low Value` - by_sub$`High Value`)>0,na.rm=T)
mean((by_sub$`Low Value` - by_sub$`High Value`)>0,na.rm=T)
plot(sort(by_sub$`Low Value` - by_sub$`High Value`), ylab = "delta arousal (High value - Low Value)") # articipants who ranked LV stim as higher arousal
plot(sort(by_sub$`Low Value` - by_sub$`High Value`), ylab = expression(paste0(Delta," arousal (High value - Low Value)"))) # articipants who ranked LV stim as higher arousal
plot(sort(by_sub$`Low Value` - by_sub$`High Value`), ylab = paste0(Delta," arousal (High value - Low Value)")) # articipants who ranked LV stim as higher arousal
plot(sort(by_sub$`Low Value` - by_sub$`High Value`), ylab = expression(paste(Delta,"arousal (High value - Low Value)"))) # articipants who ranked LV stim as higher arousal
plot(sort(by_sub$`Low Value` - by_sub$`High Value`), ylab = expression(paste(Delta," arousal (High value - Low Value)"))) # articipants who ranked LV stim as higher arousal
paste(Delta," arousal (High value - Low Value)")
expression(paste(Delta," arousal (High value - Low Value)"))
mean((by_sub$`Low Value` - by_sub$`High Value`)>0,na.rm=T)
expression(paste(Delta," arousal (High value - Low Value)"))
print(expression(paste(Delta," arousal (High value - Low Value)")))
lapply(stim_data$Aro_Ranking, list(stim_data$SubjectCode,stim_data$Val_binary), mean, na.rm=T)
lapply(stim_data$Aro_Ranking,  mean, na.rm=T)
lapply(stim_data$Aro_Ranking,  table, na.rm=T)
lapply(stim_data$Val_binary,  table, na.rm=T)
lapply(stim_data[,'Val_binary'],  table, na.rm=T)
library(dplyr)
glimpse(diamonds)
install.packages("randomForest")
library("randomForest")
install.packages("randomForest")
library("randomForest")
stim_data$Aro_Rank = as.ordered(stim_data$Aro_Rank)
stim_data$Val_Rank = as.ordered(stim_data$Val_Rank)
stim_data$Aro_Rank = as.ordered(stim_data$Aro_Rank)
summary(lmer(Val_Ranking ~ 1 + Aro_Ranking + (1|SubjectCode),data=stim_data,na.action=na.omit))
summary(lmer(Val_Rank ~ 1 + Aro_Rank + (1|SubjectCode),data=stim_data,na.action=na.omit))
summary(glmer(Val_binary ~ 1 + Aro_Ranking + (1 |SubjectCode),data=stim_data,na.action=na.omit,family='binomial'))
?glmer
# 3. Ordinal Logitic Regression or Proportional Odds Logistic Regression
library(MASS)
model <- Aro_Rank ~ . , data=stim1_data, Hess = TRUE)
model <- Aro_Rank ~ 1+ Val_binary , data=stim1_data, Hess = TRUE)
model <- polr(Aro_Rank ~ 1 + Val_binary , data=stim1_data, Hess = TRUE)
model <- polr(Aro_Rank ~ 1 + Val_binary , data=stim_data, Hess = TRUE)
summary(model)
# 4. p-Value Calculation
(ctable <- coef(summary(model)))
p <- pnorm(abs(ctable[, "t value"]), lower.tail = FALSE) * 2
(ctable <- cbind(ctable, "p value" = p))
stim_data$Val_binary
model <- polr(Aro_Rank ~ 1 + Val_binary , data=stim_data, Hess = TRUE, na.rm=T)
model <- polr(Aro_Rank ~ 1 + Val_binary , data=stim_data, Hess = TRUE, na.omit=T)
na.omit(stim_data)
stim_data=na.omit(stim_data)
model <- polr(Aro_Rank ~ 1 + Val_binary , data=stim_data, Hess = TRUE)
summary(model)
# 4. p-Value Calculation
(ctable <- coef(summary(model)))
p <- pnorm(abs(ctable[, "t value"]), lower.tail = FALSE) * 2
(ctable <- cbind(ctable, "p value" = p))
print(pred, digits = 3)
print(ctable <- cbind(ctable, "p value" = p))
print(ctable <- cbind(ctable, "p value" = p),digits=3)
print(ctable <- cbind(ctable, "p value" = p),digits=4)
p <- pnorm(abs(ctable[, "t value"]), lower.tail = FALSE) * 2
print(ctable <- cbind(ctable, "p value" = p),digits=4)
p
ctable
?pnorm
library(rms)
install.packages(rms)
install.packages("rms")
library("rms")
ddist = datadist
model <- lrm(Aro_Rank ~ 1 + Val_binary , data=stim_data)
library("rms")
install.packages("polspline")
library("rms")
library("polspline")
install.packages("polspline")
library("polspline")
View(by_sub)
View(stim_data)
View(stim_data)
View(stim1_data)
View(ctable)
View(by_sub)
ggplot(data = stim_data, aes(x= Aro_Ranking, y= Val_Ranking) +
geom_smooth(method = 'lm')
)
data
stim_data
Aro_Ranking
ggplot(data = stim_data, aes(x= Aro_Ranking, y= Val_Ranking) +
geom_smooth(method = 'lm',formula = Val_Ranking ~ Aro_Ranking))
ggplot(data = stim_data, aes(x= Aro_Ranking, y= Val_Ranking) +
geom_smooth(method = 'lm',formula = Val_Ranking ~ Aro_Ranking))
class(stim_data$Aro_Rank)
class(stim_data$Aro_Ranking)
class(stim_data$Val_Ranking)
ggplot(data = stim_data, aes(x= Aro_Ranking, y= Val_Ranking) +
geom_point(color='blue'))
ggplot(data = stim_data, aes(x= Aro_Ranking, y= Val_Ranking)) +
geom_point(color='blue')
ggplot(data = stim_data, aes(x= Aro_Ranking, y= Val_Ranking)) +
geom_smooth(method = 'lm',formula = Val_Ranking ~ Aro_Ranking)
ggplot(data = stim_data, aes(x= Aro_Ranking, y= Val_Ranking)) +
geom_smooth(method = 'lm',formula = Val_Ranking ~ Aro_Ranking)
ggplot(data = stim_data, aes(x= Aro_Ranking, y= Val_Ranking)) +
geom_point()
ggplot(data = stim_data, aes(x= Aro_Ranking, y= Val_Ranking)) +
geom_point() +
geom_smooth(method = 'lm')
hist(by_sub$`Low Value`)
hist(by_sub)
library(popbio)
install.packages(popbio)
install.packages('popbio')
library(popbio)
logi.hist.plot(stim_data$Aro_Ranking,stim_data$Val_binary,boxp=FALSE,type="hist",col="gray")
logi.hist.plot(stim_data$Aro_Ranking,stim_data$Val_binary,boxp=TRUE,type="hist",col="gray")
logi.hist.plot(stim_data$Aro_Ranking,stim_data$Val_binary,boxp=FALSE,type="hist",col="gray")
logi.hist.plot(stim_data$Aro_Ranking,stim_data$Val_binary,boxp=FALSE,type="hist")
logi.hist.plot(stim_data$Aro_Ranking,stim_data$Val_binary,boxp=FALSE,type="hist",col="gray")
rm(list=ls())
library("lme4")
library("lmerTest")
library("ggplot2")
# Define these variable:
output_path="~/Drive/Experiment_Israel/Codes/Binocular_Rivalry/BR_Politicians/analysis/output/"
#output_path="C:/Users/Tom/Dropbox/Experiment_Israel/Codes/Binocular_Rivalry_IAPS/BR_hilla/analysis/output/"
subjects=c(35,39,44,45, 46,49,51,54,56,59,63,64,65,67,70,71,74,76,77,78)
data_file=Sys.glob(paste(output_path, "/BR_data_2018*.txt",sep=""))
BR_data=read.table(data_file,header=T,na.strings=c(999))
BR_data=BR_data[BR_data$SubjectCode %in% subjects,]
BR_data$SubjectCode=as.factor(BR_data$SubjectCode)
BR_data$TrialType[BR_data$Delta_Aro==0 & BR_data$IsHighAro==1] = 1 # High Arousal - Different Valence
BR_data$TrialType[BR_data$Delta_Aro==0 & BR_data$IsHighAro==0] = 2 # Low Arousal - Different Valence
BR_data$TrialType[BR_data$Delta_Val==0 & BR_data$IsHighVal==1] = 3 # High Valence - Different Arousal
BR_data$TrialType[BR_data$Delta_Val==0 & BR_data$IsHighVal==0] = 4 # Low Valence - Different Arousal
BR_data$TrialType2=as.factor(BR_data$TrialType)
levels(BR_data$TrialType2)=c("High Arousal - Different Valence","Low Arousal - Different Valence","High Valence - Different Arousal","Low Valence - Different Arousal")
BR_data$ValidTrials=TRUE
BR_data$ValidTrials[(BR_data$Stim1Time+BR_data$Stim2Time) == 0]= FALSE # All Fusion trials
BR_data$ValidTrials[(BR_data$IsCorrupted) == 1]= FALSE # pressed 2 keys
BR_data$Delta_Val2=BR_data$Delta_Val
BR_data$Delta_Val2[BR_data$Delta_Val2==0]=NA
BR_data$Delta_Val2=as.factor(BR_data$Delta_Val2)
BR_data$Delta_Aro2=BR_data$Delta_Aro
BR_data$Delta_Aro2[BR_data$Delta_Aro2==0]=NA
BR_data$Delta_Aro2=as.factor(BR_data$Delta_Aro2)
BR_data$Delta_Val_rating=BR_data$Val1_Ranking-BR_data$Val2_Ranking
BR_data$Delta_Aro_rating=BR_data$Aro1_Ranking-BR_data$Aro2_Ranking
BR_data$DiffTime = BR_data$Stim1Time - BR_data$Stim2Time
BR_data$DiffFraction = BR_data$Stim1Fraction - BR_data$Stim2Fraction
BR_data$DiffQuantity = BR_data$Stim1Quantity - BR_data$Stim2Quantity
# Delta_Aro_rating percentiles for visualization
percentile_groups=10;
BR_data$Delta_Aro_rating_percentile=(100/percentile_groups)*round(percentile_groups*ecdf(BR_data$Delta_Aro_rating)(BR_data$Delta_Aro_rating))
BR_data$DeltaArousalPercentile_factor=as.factor(BR_data$Delta_Aro_rating_percentile)
# IGNOR NA!
BR_data_Arousal_visualize=setNames(as.data.frame(seq(0,100,by=100/percentile_groups)),'DeltaArousalPercentile')
BR_data_Arousal_visualize$DeltaArousalPercentile_factor=as.factor(BR_data_Arousal_visualize$DeltaArousalPercentile)
BR_data_Arousal_visualize$Delta_Aro_rating=tapply(BR_data$Delta_Aro_rating, BR_data$Delta_Aro_rating_percentile,mean)
BR_data_Arousal_visualize$DiffTime=tapply(BR_data$DiffTime, BR_data$Delta_Aro_rating_percentile,mean)
BR_data_Arousal_visualize$DiffFraction=tapply(BR_data$DiffFraction, BR_data$Delta_Aro_rating_percentile,mean)
BR_data_Arousal_visualize$DiffQuantity=tapply(BR_data$DiffQuantity, BR_data$Delta_Aro_rating_percentile,mean)
BR_data_Arousal_visualize$FirstPercept=tapply(BR_data$InitialStim1, BR_data$Delta_Aro_rating_percentile,mean)
BR_data_Arousal_visualize$DiffTime_sd=tapply(BR_data$DiffTime, BR_data$Delta_Aro_rating_percentile,sd)
BR_data_Arousal_visualize$DiffFraction_sd=tapply(BR_data$DiffFraction, BR_data$Delta_Aro_rating_percentile,sd)
BR_data_Arousal_visualize$DiffQuantity_sd=tapply(BR_data$DiffQuantity, BR_data$Delta_Aro_rating_percentile,sd)
BR_data_Arousal_visualize$FirstPercept_sd=tapply(BR_data$InitialStim1, BR_data$Delta_Aro_rating_percentile,sd)
# Predominance score (PDS)
ggplot(data = BR_data_Arousal_visualize, aes(DeltaArousalPercentile_factor,DiffFraction, color=Delta_Aro_rating) ) +
geom_point() +
#geom_errorbar(aes(ymin=DiffFraction-DiffFraction_sd, ymax=DiffFraction+DiffFraction_sd), width=.1) +
xlab(expression(paste(Delta," Arousal (percentile)"))) +
labs(color=expression(paste(Delta," Arousal (mean)"))) +
ylab(expression(paste(Delta," Predominance score (seconds)")))
# Predominance score (PDS)
ggplot(data = BR_data_Arousal_visualize, aes(DeltaArousalPercentile_factor,DiffFraction, color=Delta_Aro_rating) ) +
geom_point() +
#geom_errorbar(aes(ymin=DiffFraction-DiffFraction_sd, ymax=DiffFraction+DiffFraction_sd), width=.1) +
xlab(expression(paste(Delta," Arousal (percentile)"))) +
labs(color=expression(paste(Delta," Arousal (mean)"))) +
ylab(expression(paste(Delta," Predominance score (seconds)")))
View(BR_data_Arousal_visualize)
View(BR_data)
###################
# DiffFraction
###################
# One Main effect
summary(lmer(DiffFraction ~ 1 + Delta_Aro_rating + (1|SubjectCode),data=subset(BR_data,(BR_data$ValidTrials)),na.action=na.omit))
###################
# DiffFraction
###################
# One Main effect
summary(lmer(DiffFraction ~ 1 + Delta_Aro_rating + (1|SubjectCode),data=subset(BR_data,(BR_data$ValidTrials)),na.action=na.omit))
summary(lmer(DiffTime ~ 1 + Delta_Aro_rating + (1|SubjectCode),data=subset(BR_data,(BR_data$ValidTrials)),na.action=na.omit))
summary(lmer(DiffQuantity ~ 1 + Delta_Aro_rating + (1|SubjectCode),data=subset(BR_data,(BR_data$ValidTrials)),na.action=na.omit))
summary(glmer(InitialStim1 ~ 1 + Delta_Aro_rating + (1|SubjectCode),data=subset(BR_data,(BR_data$ValidTrials)),na.action=na.omit,family=binomial))
# Two Main effects + interaction
summary(lmer(DiffFraction ~ 1 + Delta_Val2 * Delta_Aro_rating + (1|SubjectCode),data=subset(BR_data,(BR_data$ValidTrials & BR_data$TrialType==1)),na.action=na.omit))
###################
# DiffFraction
###################
# One Main effect
summary(lmer(DiffFraction ~ 1 + Delta_Aro_rating + (1|SubjectCode),data=subset(BR_data,(BR_data$ValidTrials)),na.action=na.omit))
summary(lmer(DiffTime ~ 1 + Delta_Aro_rating + (1|SubjectCode),data=subset(BR_data,(BR_data$ValidTrials)),na.action=na.omit))
summary(lmer(DiffQuantity ~ 1 + Delta_Aro_rating + (1|SubjectCode),data=subset(BR_data,(BR_data$ValidTrials)),na.action=na.omit))
summary(glmer(InitialStim1 ~ 1 + Delta_Aro_rating + (1|SubjectCode),data=subset(BR_data,(BR_data$ValidTrials)),na.action=na.omit,family=binomial))
BR_data$Delta_Aro_rating_percentile = p
summary(glmer(InitialStim1 ~ 1 + Delta_Aro_rating + (1|SubjectCode),data=subset(BR_data,(BR_data$ValidTrials)),na.action=na.omit,family=binomial))
summary(lmer(DiffFraction ~ 1 + Delta_Val2 + (1|SubjectCode),data=subset(BR_data,(BR_data$ValidTrials & BR_data$TrialType==1)),na.action=na.omit))
###################
# DiffFraction
###################
# One Main effect
summary(lmer(DiffFraction ~ 1 + Delta_Aro_rating + (1|SubjectCode),data=subset(BR_data,(BR_data$ValidTrials)),na.action=na.omit))
summary(lmer(DiffFraction ~ 1 + Delta_Val2 + (1|SubjectCode),data=subset(BR_data,(BR_data$ValidTrials & BR_data$TrialType==1)),na.action=na.omit))
subset(BR_data,(BR_data$ValidTrials & BR_data$TrialType==1))
rm(list=ls())
library("lme4")
library("lmerTest")
library("ggplot2")
# Define these variable:
output_path="~/Drive/Experiment_Israel/Codes/Binocular_Rivalry/BR_Politicians/analysis/output/"
#output_path="C:/Users/Tom/Dropbox/Experiment_Israel/Codes/Binocular_Rivalry_IAPS/BR_hilla/analysis/output/"
subjects=c(35,39,44,45, 46,49,51,54,56,59,63,64,65,67,70,71,74,76,77,78)
data_file=Sys.glob(paste(output_path, "/BR_data_2018*.txt",sep=""))
BR_data=read.table(data_file,header=T,na.strings=c(999))
BR_data=BR_data[BR_data$SubjectCode %in% subjects,]
BR_data$SubjectCode=as.factor(BR_data$SubjectCode)
BR_data$TrialType[BR_data$Delta_Aro==0 & BR_data$IsHighAro==1] = 1 # High Arousal - Different Valence
BR_data$TrialType[BR_data$Delta_Aro==0 & BR_data$IsHighAro==0] = 2 # Low Arousal - Different Valence
BR_data$TrialType[BR_data$Delta_Val==0 & BR_data$IsHighVal==1] = 3 # High Valence - Different Arousal
BR_data$TrialType[BR_data$Delta_Val==0 & BR_data$IsHighVal==0] = 4 # Low Valence - Different Arousal
BR_data$TrialType2=as.factor(BR_data$TrialType)
levels(BR_data$TrialType2)=c("High Arousal - Different Valence","Low Arousal - Different Valence","High Valence - Different Arousal","Low Valence - Different Arousal")
BR_data$ValidTrials=TRUE
BR_data$ValidTrials[(BR_data$Stim1Time+BR_data$Stim2Time) == 0]= FALSE # All Fusion trials
BR_data$ValidTrials[(BR_data$IsCorrupted) == 1]= FALSE # pressed 2 keys
BR_data$Delta_Val2=BR_data$Delta_Val
BR_data$Delta_Val2[BR_data$Delta_Val2==0]=NA
BR_data$Delta_Val2=as.factor(BR_data$Delta_Val2)
BR_data$Delta_Aro2=BR_data$Delta_Aro
BR_data$Delta_Aro2[BR_data$Delta_Aro2==0]=NA
BR_data$Delta_Aro2=as.factor(BR_data$Delta_Aro2)
BR_data$Delta_Val_rating=BR_data$Val1_Ranking-BR_data$Val2_Ranking
BR_data$Delta_Aro_rating=BR_data$Aro1_Ranking-BR_data$Aro2_Ranking
BR_data$DiffTime = BR_data$Stim1Time - BR_data$Stim2Time
BR_data$DiffFraction = BR_data$Stim1Fraction - BR_data$Stim2Fraction
BR_data$DiffQuantity = BR_data$Stim1Quantity - BR_data$Stim2Quantity
# Delta_Aro_rating percentiles for visualization
percentile_groups=10;
BR_data$Delta_Aro_rating_percentile=(100/percentile_groups)*round(percentile_groups*ecdf(BR_data$Delta_Aro_rating)(BR_data$Delta_Aro_rating))
BR_data$DeltaArousalPercentile_factor=as.factor(BR_data$Delta_Aro_rating_percentile)
# IGNOR NA!
BR_data_Arousal_visualize=setNames(as.data.frame(seq(0,100,by=100/percentile_groups)),'DeltaArousalPercentile')
BR_data_Arousal_visualize$DeltaArousalPercentile_factor=as.factor(BR_data_Arousal_visualize$DeltaArousalPercentile)
BR_data_Arousal_visualize$Delta_Aro_rating=tapply(BR_data$Delta_Aro_rating, BR_data$Delta_Aro_rating_percentile,mean)
BR_data_Arousal_visualize$DiffTime=tapply(BR_data$DiffTime, BR_data$Delta_Aro_rating_percentile,mean)
BR_data_Arousal_visualize$DiffFraction=tapply(BR_data$DiffFraction, BR_data$Delta_Aro_rating_percentile,mean)
BR_data_Arousal_visualize$DiffQuantity=tapply(BR_data$DiffQuantity, BR_data$Delta_Aro_rating_percentile,mean)
BR_data_Arousal_visualize$FirstPercept=tapply(BR_data$InitialStim1, BR_data$Delta_Aro_rating_percentile,mean)
BR_data_Arousal_visualize$DiffTime_sd=tapply(BR_data$DiffTime, BR_data$Delta_Aro_rating_percentile,sd)
BR_data_Arousal_visualize$DiffFraction_sd=tapply(BR_data$DiffFraction, BR_data$Delta_Aro_rating_percentile,sd)
BR_data_Arousal_visualize$DiffQuantity_sd=tapply(BR_data$DiffQuantity, BR_data$Delta_Aro_rating_percentile,sd)
BR_data_Arousal_visualize$FirstPercept_sd=tapply(BR_data$InitialStim1, BR_data$Delta_Aro_rating_percentile,sd)
# Predominance score (PDS)
ggplot(data = BR_data_Arousal_visualize, aes(DeltaArousalPercentile_factor,DiffFraction, color=Delta_Aro_rating) ) +
geom_point() +
#geom_errorbar(aes(ymin=DiffFraction-DiffFraction_sd, ymax=DiffFraction+DiffFraction_sd), width=.1) +
xlab(expression(paste(Delta," Arousal (percentile)"))) +
labs(color=expression(paste(Delta," Arousal (mean)"))) +
ylab(expression(paste(Delta," Predominance score (seconds)")))
# Average dominance duration (ADD)
ggplot(data = BR_data_Arousal_visualize, aes(DeltaArousalPercentile_factor,DiffTime, color=Delta_Aro_rating) ) +
geom_point() +
#geom_errorbar(aes(ymin=DiffTime-DiffTime_sd, ymax=DiffTime+DiffTime_sd), width=.1) +
xlab(expression(paste(Delta," Arousal (percentile)"))) +
labs(color=expression(paste(Delta," Arousal (mean)"))) +
ylab(expression(paste(Delta," Average dominance duration  (seconds)")))
# Percepts after fusion (PAF)
ggplot(data = BR_data_Arousal_visualize, aes(DeltaArousalPercentile_factor,DiffQuantity, color=Delta_Aro_rating) ) +
geom_point() +
#geom_errorbar(aes(ymin=DiffQuantity-DiffQuantity_sd, ymax=DiffQuantity+DiffQuantity_sd), width=.1) +
xlab(expression(paste(Delta," Arousal (percentile)"))) +
labs(color=expression(paste(Delta," Arousal (mean)"))) +
ylab(expression(paste(Delta," Percepets after Fusion")))
ggplot(data = BR_data, aes(DeltaArousalPercentile_factor,DiffFraction) ) + geom_boxplot()
###################
# DiffFraction
###################
# One Main effect
summary(lmer(DiffFraction ~ 1 + Delta_Aro_rating + (1|SubjectCode),data=subset(BR_data,(BR_data$ValidTrials)),na.action=na.omit))
summary(lmer(DiffTime ~ 1 + Delta_Aro_rating + (1|SubjectCode),data=subset(BR_data,(BR_data$ValidTrials)),na.action=na.omit))
summary(lmer(DiffQuantity ~ 1 + Delta_Aro_rating + (1|SubjectCode),data=subset(BR_data,(BR_data$ValidTrials)),na.action=na.omit))
summary(glmer(InitialStim1 ~ 1 + Delta_Aro_rating + (1|SubjectCode),data=subset(BR_data,(BR_data$ValidTrials)),na.action=na.omit,family=binomial))
BR_data$Delta_Aro_rating_percentile = p
summary(lmer(DiffFraction ~ 1 + Delta_Val2 + (1|SubjectCode),data=subset(BR_data,(BR_data$ValidTrials & BR_data$TrialType==1)),na.action=na.omit))
View(BR_data)
rm(list=ls())
library("lme4")
library("lmerTest")
library("ggplot2")
# Define these variable:
output_path="~/Drive/Experiment_Israel/Codes/Binocular_Rivalry/BR_Politicians/analysis/output/"
#output_path="C:/Users/Tom/Dropbox/Experiment_Israel/Codes/Binocular_Rivalry_IAPS/BR_hilla/analysis/output/"
subjects=c(35,39,44,45, 46,49,51,54,56,59,63,64,65,67,70,71,74,76,77,78)
data_file=Sys.glob(paste(output_path, "/BR_data_2018*.txt",sep=""))
BR_data=read.table(data_file,header=T,na.strings=c(999))
BR_data=BR_data[BR_data$SubjectCode %in% subjects,]
BR_data$SubjectCode=as.factor(BR_data$SubjectCode)
BR_data$TrialType[BR_data$Delta_Aro==0 & BR_data$IsHighAro==1] = 1 # High Arousal - Different Valence
BR_data$TrialType[BR_data$Delta_Aro==0 & BR_data$IsHighAro==0] = 2 # Low Arousal - Different Valence
BR_data$TrialType[BR_data$Delta_Val==0 & BR_data$IsHighVal==1] = 3 # High Valence - Different Arousal
BR_data$TrialType[BR_data$Delta_Val==0 & BR_data$IsHighVal==0] = 4 # Low Valence - Different Arousal
BR_data$TrialType2=as.factor(BR_data$TrialType)
levels(BR_data$TrialType2)=c("High Arousal - Different Valence","Low Arousal - Different Valence","High Valence - Different Arousal","Low Valence - Different Arousal")
BR_data$ValidTrials=TRUE
BR_data$ValidTrials[(BR_data$Stim1Time+BR_data$Stim2Time) == 0]= FALSE # All Fusion trials
BR_data$ValidTrials[(BR_data$IsCorrupted) == 1]= FALSE # pressed 2 keys
BR_data$Delta_Val2=BR_data$Delta_Val
BR_data$Delta_Val2[BR_data$Delta_Val2==0]=NA
BR_data$Delta_Val2=as.factor(BR_data$Delta_Val2)
BR_data$Delta_Aro2=BR_data$Delta_Aro
BR_data$Delta_Aro2[BR_data$Delta_Aro2==0]=NA
BR_data$Delta_Aro2=as.factor(BR_data$Delta_Aro2)
BR_data$Delta_Val_rating=BR_data$Val1_Ranking-BR_data$Val2_Ranking
BR_data$Delta_Aro_rating=BR_data$Aro1_Ranking-BR_data$Aro2_Ranking
BR_data$DiffTime = BR_data$Stim1Time - BR_data$Stim2Time
BR_data$DiffFraction = BR_data$Stim1Fraction - BR_data$Stim2Fraction
BR_data$DiffQuantity = BR_data$Stim1Quantity - BR_data$Stim2Quantity
# Delta_Aro_rating percentiles for visualization
percentile_groups=10;
BR_data$Delta_Aro_rating_percentile=(100/percentile_groups)*round(percentile_groups*ecdf(BR_data$Delta_Aro_rating)(BR_data$Delta_Aro_rating))
BR_data$DeltaArousalPercentile_factor=as.factor(BR_data$Delta_Aro_rating_percentile)
# IGNOR NA!
BR_data_Arousal_visualize=setNames(as.data.frame(seq(0,100,by=100/percentile_groups)),'DeltaArousalPercentile')
BR_data_Arousal_visualize$DeltaArousalPercentile_factor=as.factor(BR_data_Arousal_visualize$DeltaArousalPercentile)
BR_data_Arousal_visualize$Delta_Aro_rating=tapply(BR_data$Delta_Aro_rating, BR_data$Delta_Aro_rating_percentile,mean)
BR_data_Arousal_visualize$DiffTime=tapply(BR_data$DiffTime, BR_data$Delta_Aro_rating_percentile,mean)
BR_data_Arousal_visualize$DiffFraction=tapply(BR_data$DiffFraction, BR_data$Delta_Aro_rating_percentile,mean)
BR_data_Arousal_visualize$DiffQuantity=tapply(BR_data$DiffQuantity, BR_data$Delta_Aro_rating_percentile,mean)
BR_data_Arousal_visualize$FirstPercept=tapply(BR_data$InitialStim1, BR_data$Delta_Aro_rating_percentile,mean)
BR_data_Arousal_visualize$DiffTime_sd=tapply(BR_data$DiffTime, BR_data$Delta_Aro_rating_percentile,sd)
BR_data_Arousal_visualize$DiffFraction_sd=tapply(BR_data$DiffFraction, BR_data$Delta_Aro_rating_percentile,sd)
BR_data_Arousal_visualize$DiffQuantity_sd=tapply(BR_data$DiffQuantity, BR_data$Delta_Aro_rating_percentile,sd)
BR_data_Arousal_visualize$FirstPercept_sd=tapply(BR_data$InitialStim1, BR_data$Delta_Aro_rating_percentile,sd)
# Predominance score (PDS)
ggplot(data = BR_data_Arousal_visualize, aes(DeltaArousalPercentile_factor,DiffFraction, color=Delta_Aro_rating) ) +
geom_point() +
#geom_errorbar(aes(ymin=DiffFraction-DiffFraction_sd, ymax=DiffFraction+DiffFraction_sd), width=.1) +
xlab(expression(paste(Delta," Arousal (percentile)"))) +
labs(color=expression(paste(Delta," Arousal (mean)"))) +
ylab(expression(paste(Delta," Predominance score (seconds)")))
# Average dominance duration (ADD)
ggplot(data = BR_data_Arousal_visualize, aes(DeltaArousalPercentile_factor,DiffTime, color=Delta_Aro_rating) ) +
geom_point() +
#geom_errorbar(aes(ymin=DiffTime-DiffTime_sd, ymax=DiffTime+DiffTime_sd), width=.1) +
xlab(expression(paste(Delta," Arousal (percentile)"))) +
labs(color=expression(paste(Delta," Arousal (mean)"))) +
ylab(expression(paste(Delta," Average dominance duration  (seconds)")))
# Percepts after fusion (PAF)
ggplot(data = BR_data_Arousal_visualize, aes(DeltaArousalPercentile_factor,DiffQuantity, color=Delta_Aro_rating) ) +
geom_point() +
#geom_errorbar(aes(ymin=DiffQuantity-DiffQuantity_sd, ymax=DiffQuantity+DiffQuantity_sd), width=.1) +
xlab(expression(paste(Delta," Arousal (percentile)"))) +
labs(color=expression(paste(Delta," Arousal (mean)"))) +
ylab(expression(paste(Delta," Percepets after Fusion")))
ggplot(data = BR_data, aes(DeltaArousalPercentile_factor,DiffFraction) ) + geom_boxplot()
###################
# DiffFraction
###################
# One Main effect
summary(lmer(DiffFraction ~ 1 + Delta_Aro_rating + (1|SubjectCode),data=subset(BR_data,(BR_data$ValidTrials)),na.action=na.omit))
summary(lmer(DiffTime ~ 1 + Delta_Aro_rating + (1|SubjectCode),data=subset(BR_data,(BR_data$ValidTrials)),na.action=na.omit))
summary(lmer(DiffQuantity ~ 1 + Delta_Aro_rating + (1|SubjectCode),data=subset(BR_data,(BR_data$ValidTrials)),na.action=na.omit))
BR_data$TrialType
BR_data$Delta_Aro==0
BR_data$TrialType[BR_data$Delta_Aro==0 & BR_data$IsHighAro==1] = 1 # High Arousal - Different Valence
BR_data$TrialType[BR_data$Delta_Aro==0 & BR_data$IsHighAro==1]
BR_data$TrialType[BR_data$Delta_Aro==0 & BR_data$IsHighAro==1] = 1 # High Arousal - Different Valence
BR_data$TrialType[BR_data$Delta_Aro==0 & BR_data$IsHighAro==1]
data_file=Sys.glob(paste(output_path, "/BR_data_2018*.txt",sep=""))
BR_data=read.table(data_file,header=T,na.strings=c(999))
BR_data=BR_data[BR_data$SubjectCode %in% subjects,]
BR_data$SubjectCode=as.factor(BR_data$SubjectCode)
BR_data$TrialType
BR_data$TrialType = NA
BR_data$TrialType[BR_data$Delta_Aro==0 & BR_data$IsHighAro==1] = 1 # High Arousal - Different Valence
BR_data$TrialType
BR_data$Delta_Aro==0 & BR_data$IsHighAro==1
BR_data$Delta_Aro
View(BR_data)
data_file
library("lme4")
library("lmerTest")
library("ggplot2")
# Define these variable:
output_path="~/Drive/Experiment_Israel/Codes/Binocular_Rivalry/BR_Politicians/analysis/output/"
#output_path="C:/Users/Tom/Dropbox/Experiment_Israel/Codes/Binocular_Rivalry_IAPS/BR_hilla/analysis/output/"
subjects=c(35,39,44,45, 46,49,51,54,56,59,63,64,65,67,70,71,74,76,77,78)
data_file=Sys.glob(paste(output_path, "/BR_data_20181128*.txt",sep=""))
BR_data=read.table(data_file,header=T,na.strings=c(999))
BR_data=BR_data[BR_data$SubjectCode %in% subjects,]
BR_data$SubjectCode=as.factor(BR_data$SubjectCode)
BR_data$TrialType[BR_data$Delta_Aro==0 & BR_data$IsHighAro==1] = 1 # High Arousal - Different Valence
BR_data$TrialType[BR_data$Delta_Aro==0 & BR_data$IsHighAro==0] = 2 # Low Arousal - Different Valence
BR_data$TrialType[BR_data$Delta_Val==0 & BR_data$IsHighVal==1] = 3 # High Valence - Different Arousal
BR_data$TrialType[BR_data$Delta_Val==0 & BR_data$IsHighVal==0] = 4 # Low Valence - Different Arousal
BR_data$TrialType2=as.factor(BR_data$TrialType)
levels(BR_data$TrialType2)=c("High Arousal - Different Valence","Low Arousal - Different Valence","High Valence - Different Arousal","Low Valence - Different Arousal")
BR_data$ValidTrials=TRUE
BR_data$ValidTrials[(BR_data$Stim1Time+BR_data$Stim2Time) == 0]= FALSE # All Fusion trials
BR_data$ValidTrials[(BR_data$IsCorrupted) == 1]= FALSE # pressed 2 keys
BR_data$Delta_Val2=BR_data$Delta_Val
BR_data$Delta_Val2[BR_data$Delta_Val2==0]=NA
BR_data$Delta_Val2=as.factor(BR_data$Delta_Val2)
BR_data$Delta_Aro2=BR_data$Delta_Aro
BR_data$Delta_Aro2[BR_data$Delta_Aro2==0]=NA
BR_data$Delta_Aro2=as.factor(BR_data$Delta_Aro2)
BR_data$Delta_Val_rating=BR_data$Val1_Ranking-BR_data$Val2_Ranking
BR_data$Delta_Aro_rating=BR_data$Aro1_Ranking-BR_data$Aro2_Ranking
BR_data$DiffTime = BR_data$Stim1Time - BR_data$Stim2Time
BR_data$DiffFraction = BR_data$Stim1Fraction - BR_data$Stim2Fraction
BR_data$DiffQuantity = BR_data$Stim1Quantity - BR_data$Stim2Quantity
# Delta_Aro_rating percentiles for visualization
percentile_groups=10;
BR_data$Delta_Aro_rating_percentile=(100/percentile_groups)*round(percentile_groups*ecdf(BR_data$Delta_Aro_rating)(BR_data$Delta_Aro_rating))
BR_data$DeltaArousalPercentile_factor=as.factor(BR_data$Delta_Aro_rating_percentile)
# IGNOR NA!
BR_data_Arousal_visualize=setNames(as.data.frame(seq(0,100,by=100/percentile_groups)),'DeltaArousalPercentile')
BR_data_Arousal_visualize$DeltaArousalPercentile_factor=as.factor(BR_data_Arousal_visualize$DeltaArousalPercentile)
BR_data_Arousal_visualize$Delta_Aro_rating=tapply(BR_data$Delta_Aro_rating, BR_data$Delta_Aro_rating_percentile,mean)
BR_data_Arousal_visualize$DiffTime=tapply(BR_data$DiffTime, BR_data$Delta_Aro_rating_percentile,mean)
BR_data_Arousal_visualize$DiffFraction=tapply(BR_data$DiffFraction, BR_data$Delta_Aro_rating_percentile,mean)
BR_data_Arousal_visualize$DiffQuantity=tapply(BR_data$DiffQuantity, BR_data$Delta_Aro_rating_percentile,mean)
BR_data_Arousal_visualize$FirstPercept=tapply(BR_data$InitialStim1, BR_data$Delta_Aro_rating_percentile,mean)
BR_data_Arousal_visualize$FirstPercept
rm(list=ls())
library("lme4")
library("lmerTest")
library("ggplot2")
# Define these variable:
output_path="~/Drive/Experiment_Israel/Codes/Binocular_Rivalry/BR_Politicians/analysis/output/"
#output_path="C:/Users/Tom/Dropbox/Experiment_Israel/Codes/Binocular_Rivalry_IAPS/BR_hilla/analysis/output/"
subjects=c(35,39,44,45, 46,49,51,54,56,59,63,64,65,67,70,71,74,76,77,78)
data_file=Sys.glob(paste(output_path, "/BR_data_20181128*.txt",sep=""))
BR_data=read.table(data_file,header=T,na.strings=c(999))
BR_data=BR_data[BR_data$SubjectCode %in% subjects,]
BR_data$SubjectCode=as.factor(BR_data$SubjectCode)
BR_data$TrialType[BR_data$Delta_Aro==0 & BR_data$IsHighAro==1] = 1 # High Arousal - Different Valence
BR_data$TrialType[BR_data$Delta_Aro==0 & BR_data$IsHighAro==0] = 2 # Low Arousal - Different Valence
BR_data$TrialType[BR_data$Delta_Val==0 & BR_data$IsHighVal==1] = 3 # High Valence - Different Arousal
BR_data$TrialType[BR_data$Delta_Val==0 & BR_data$IsHighVal==0] = 4 # Low Valence - Different Arousal
BR_data$TrialType2=as.factor(BR_data$TrialType)
levels(BR_data$TrialType2)=c("High Arousal - Different Valence","Low Arousal - Different Valence","High Valence - Different Arousal","Low Valence - Different Arousal")
BR_data$TrialType[BR_data$Delta_Aro==0 & BR_data$IsHighAro==1] = 1 # High Arousal - Different Valence
BR_data$TrialType[BR_data$Delta_Aro==0 & BR_data$IsHighAro==0] = 2 # Low Arousal - Different Valence
BR_data$TrialType[BR_data$Delta_Val==0 & BR_data$IsHighVal==1] = 3 # High Valence - Different Arousal
BR_data$TrialType[BR_data$Delta_Val==0 & BR_data$IsHighVal==0] = 4 # Low Valence - Different Arousal
BR_data$TrialType2=as.factor(BR_data$TrialType)
View(BR_data)
BR_data$Delta_Val_rating=BR_data$Val1_Ranking-BR_data$Val2_Ranking
BR_data$Delta_Aro_rating=BR_data$Aro1_Ranking-BR_data$Aro2_Ranking
BR_data$Delta_Val_rating
BR_data$Val1_Ranking
View(BR_data)
require("lme4")
require("asfasv")
?rewuire
?require
###################
# DiffFraction
###################
# One Main effect - merged across trial types
summary(lmer(DiffFraction ~ 1 + Delta_Val2 + (1|SubjectCode),data=subset(BR_data,(BR_data$ValidTrials & BR_data$TrialType<=2)),na.action=na.omit))
scatter3d(DiffFraction ~ Delta_Aro_rating + Delta_Val_rating , BR_data2,
parallel=FALSE, fit="smooth",
surface.col=list("black","blue") ,surface.alpha = list(0.3),axis.scales=FALSE,
xlab = c("Preference Bias (rank)"),
ylab = c("PHQ (rank)"),
zlab = c("CAT effect (rank)"),
neg.res.col = NA,
pos.res.col = NA)
library(popbio)
library(lattice)
pwd
# Define these variable:
pwd = dirname(rstudioapi::getActiveDocumentContext()$path)
pwd
setwd(pwd)
?rstudioapi
library("rstudioapi")
require("lme4")
require("lme4")
require("lmerTest")
require("Rcmdr")
require("rstudioapi")
require("lme4")
require("lmerTest")
require("Rcmdr")
require("rstudioapi")
# clear workspace
rm(list=ls())
# Load rquired R packages
require("lme4")
require("lmerTest")
require("Rcmdr")
require("rstudioapi")
# Define the current script location as the working directory
pwd = dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(pwd)
pwd
output_path=paste(pwd,'/processed_data/')
output_path
output_path=paste0(pwd,'/processed_data/')
output_path
